<?php

namespace OGIVE\ProjectBundle\Repository;


use Doctrine\ORM\EntityRepository;
/**
 * DecompteValidationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DecompteValidationRepository extends EntityRepository
{
    public function deleteDecompteValidation(\OGIVE\ProjectBundle\Entity\DecompteValidation $decompteValidation) {
        $em= $this->_em;
        $decompteValidation->setStatus(0);
        $em->getConnection()->beginTransaction();
        try{
            $em->persist($decompteValidation);
            $em->flush();
            $em->getConnection()->commit();
            return $decompteValidation;
        } catch (Exception $ex) {
            $em->getConnection()->rollback();
            $em->close();
            throw $ex;
        }
    }


    public function saveDecompteValidation(\OGIVE\ProjectBundle\Entity\DecompteValidation $decompteValidation) {
        $em= $this->_em;
        $decompteValidation->setStatus(1);
        $em->getConnection()->beginTransaction();
        try{
            $em->persist($decompteValidation);
            $em->flush();
            $em->getConnection()->commit();
        } catch (Exception $ex) {
            $em->getConnection()->rollback();
            $em->close();
            throw $ex;
        }
        return $decompteValidation;
    }

    public function updateDecompteValidation(\OGIVE\ProjectBundle\Entity\DecompteValidation $decompteValidation) {
        $em= $this->_em;
        $em->getConnection()->beginTransaction();
        try{
            $em->persist($decompteValidation);
            $em->flush();
            $em->getConnection()->commit();
        } catch (Exception $ex) {
            $em->getConnection()->rollback();
            $em->close();
            throw $ex;
        }
        return $decompteValidation;
    }
    
    public function getDecompteValidationQueryBuilder() {
         return $this
          ->createQueryBuilder('e')
          ->where('e.status = :status')
          ->andWhere('e.state = :state')
          ->orderBy('e.name', 'ASC')
          ->setParameter('status', 1)
         ->setParameter('state', 1);

    }
}
