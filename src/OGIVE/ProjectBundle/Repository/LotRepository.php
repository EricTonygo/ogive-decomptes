<?php

namespace OGIVE\ProjectBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * LotRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class LotRepository extends EntityRepository {

    public function deleteLot(\OGIVE\ProjectBundle\Entity\Lot $lot) {
        $em = $this->_em;
        $em->getConnection()->beginTransaction();
        try {
            $tasks = $lot->getTasks();
            foreach ($tasks as $task) {
                $em->remove($task);
            }
            $decompteLots = $lot->getDecompteLots();
            foreach ($decompteLots as $decompteLot) {
                $decompteTasks = $decompteLot->getDecompteTasks();
                foreach ($decompteTasks as $decompteTask) {
                    $em->remove($decompteTask);
                }
                $em->remove($decompteLot);
            }
            $em->remove($lot);
            $em->flush();
            $em->getConnection()->commit();
            return true;
        } catch (Exception $ex) {
            $em->getConnection()->rollback();
            $em->close();
            throw $ex;
        }
    }

    public function saveLot(\OGIVE\ProjectBundle\Entity\Lot $lot) {
        $em = $this->_em;
        $lot->setStatus(1);
        $em->getConnection()->beginTransaction();
        try {
            $em->persist($lot);
            $em->flush();
            $em->getConnection()->commit();
        } catch (Exception $ex) {
            $em->getConnection()->rollback();
            $em->close();
            throw $ex;
        }
        return $lot;
    }

    public function updateLot(\OGIVE\ProjectBundle\Entity\Lot $lot) {
        $em = $this->_em;
        $em->getConnection()->beginTransaction();
        try {
            $em->persist($lot);
            $em->flush();
            $em->getConnection()->commit();
        } catch (Exception $ex) {
            $em->getConnection()->rollback();
            $em->close();
            throw $ex;
        }
        return $lot;
    }

    public function getAll($offset = null, $limit = null, $search_query = null, $project = null) {
        $qb = $this->createQueryBuilder('e');
        $qb->where('e.status = 1');
        if ($search_query) {
            $qb->andWhere(
                    $qb->expr()->orX(
                            $qb->expr()->like('lower(e.nom)', ':search_query'), $qb->expr()->like('lower(e.searchData)', ':search_query')
            ));
            $search_query = strtolower($search_query);
            $qb->setParameter('search_query', '%' . strtolower($search_query) . '%');
        }

        if ($project && $project != "0") {
            $qb->join("e.project", 'u');
            $qb->andWhere('u.id = :project');
            $qb->setParameter("project", intval($project));
        }
        $qb->orderBy('e.numero', 'ASC');

        if ($offset) {
            $qb->setFirstResult($offset);
        }
        if ($limit) {
            $qb->setMaxResults($limit);
        }
        return $qb->getQuery()->getResult();
    }

    public function getLotQueryBuilder() {
        return $this
                        ->createQueryBuilder('e')
                        ->where('e.status = :status')
                        ->andWhere('e.state = :state')
                        ->orderBy('e.reference', 'ASC')
                        ->setParameter('status', 1)
                        ->setParameter('state', 1);
    }

}
