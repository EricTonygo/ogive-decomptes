<?php

namespace OGIVE\ProjectBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\Common\Collections\Collection;

/**
 * TaskRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TaskRepository extends EntityRepository {

    public function deleteTask(\OGIVE\ProjectBundle\Entity\Task $task) {
        $em = $this->_em;
        $repositoryDecompteTask = $em->getRepository("OGIVEProjectBundle:DecompteTask");
        $em->getConnection()->beginTransaction();
        try {
            $decompteTasks = $task->getDecompteTasks();
            foreach ($decompteTasks as $decompteTask) {
                $repositoryDecompteTask->deleteDecompteTask($decompteTask);
            }
            $subTasks = $task->getSubTasks();
            foreach ($subTasks as $subTask) {
                $this->deleteTask($subTask);
            }
            $em->remove($task);
            $em->flush();
            $em->getConnection()->commit();
            return true;
        } catch (Exception $ex) {
            $em->getConnection()->rollback();
            $em->close();
            throw $ex;
        }
    }

    public function saveTask(\OGIVE\ProjectBundle\Entity\Task $task) {
        $em = $this->_em;
        $task->setStatus(1);
        $em->getConnection()->beginTransaction();
        try {
            $em->persist($task);
            $em->flush();
            $em->getConnection()->commit();
        } catch (Exception $ex) {
            $em->getConnection()->rollback();
            $em->close();
            throw $ex;
        }
        return $task;
    }

    public function updateTask(\OGIVE\ProjectBundle\Entity\Task $task) {
        $em = $this->_em;
        $em->getConnection()->beginTransaction();
        try {
            $em->persist($task);
            $em->flush();
            $em->getConnection()->commit();
        } catch (Exception $ex) {
            $em->getConnection()->rollback();
            $em->close();
            throw $ex;
        }
        return $task;
    }

    public function getAll($offset = null, $limit = null, $search_query = null, $parentTask = null, $project = null) {
        $qb = $this->createQueryBuilder('e');
        $qb->where('e.status = 1');
        if ($search_query) {
            $qb->andWhere(
                    $qb->expr()->orX(
                            $qb->expr()->like('lower(e.nom)', ':search_query'), $qb->expr()->like('lower(e.unite)', ':search_query'), $qb->expr()->like('lower(e.searchData)', ':search_query')
            ));
            $search_query = strtolower($search_query);
            $qb->setParameter('search_query', '%' . $search_query . '%');
        }

        if ($parentTask && $parentTask != "0") {
            $qb->join("e.parentTask", 'p');
            $qb->andWhere('p.id = :parentTask');
            $qb->setParameter("parentTask", intval($parentTask));
        }

        if ($project && $project != "0") {
            $qb->join("e.project", 'u');
            $qb->andWhere('u.id = :project');
            $qb->setParameter("project", intval($project));
        }

        $qb->orderBy('e.createDate', 'DESC');

        if ($offset) {
            $qb->setFirstResult($offset);
        }
        if ($limit) {
            $qb->setMaxResults($limit);
        }
        return $qb->getQuery()->getResult();
    }

    public function getTaskQueryBuilder() {
        return $this
                        ->createQueryBuilder('e')
                        ->where('e.status = :status')
                        ->andWhere('e.state = :state')
                        ->orderBy('e.nom', 'ASC')
                        ->setParameter('status', 1)
                        ->setParameter('state', 1);
    }

}
