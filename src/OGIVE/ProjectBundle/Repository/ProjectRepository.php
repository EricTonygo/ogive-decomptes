<?php

namespace OGIVE\ProjectBundle\Repository;


use Doctrine\ORM\EntityRepository;
/**
 * ProjectRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProjectRepository extends EntityRepository
{
    public function deleteProject(\OGIVE\ProjectBundle\Entity\Project $project) {
        $em= $this->_em;
        $project->setStatus(0);
        $em->getConnection()->beginTransaction();
        try{
            $em->persist($project);
            $em->flush();
            $em->getConnection()->commit();
            return $project;
        } catch (Exception $ex) {
            $em->getConnection()->rollback();
            $em->close();
            throw $ex;
        }
    }


    public function saveProject(\OGIVE\ProjectBundle\Entity\Project $project) {
        $em= $this->_em;
        $project->setStatus(1);
        $em->getConnection()->beginTransaction();
        try{
            $em->persist($project);
            $em->flush();
            $em->getConnection()->commit();
        } catch (Exception $ex) {
            $em->getConnection()->rollback();
            $em->close();
            throw $ex;
        }
        return $project;
    }

    public function updateProject(\OGIVE\ProjectBundle\Entity\Project $project) {
        $em= $this->_em;
        $em->getConnection()->beginTransaction();
        try{
            $em->persist($project);
            $em->flush();
            $em->getConnection()->commit();
        } catch (Exception $ex) {
            $em->getConnection()->rollback();
            $em->close();
            throw $ex;
        }
        return $project;
    }
    public function getAll($offset = null, $limit = null, $search_query = null, $user = null) {
        $qb = $this->createQueryBuilder('e');
        $qb->where('e.status = 1');
        if ($search_query) {
            $qb->andWhere(
                    $qb->expr()->orX(
                            $qb->expr()->like('lower(e.numeroMarche)', ':search_query'), $qb->expr()->like('lower(e.subject)', ':search_query'), $qb->expr()->like('lower(e.searchData)', ':search_query')
            ));
            $search_query = strtolower($search_query);
            $qb->setParameter('search_query', '%' . strtolower($search_query) . '%');
        }
        
        if ($user && $user != "0") {
            $qb->join("e.createdUser", 'u');
            $qb->andWhere('u.id = :user');
            $qb->setParameter("user", intval($user->getId()));
        }
        $qb->orderBy('e.createDate', 'DESC');
        
        if ($offset) {
            $qb->setFirstResult($offset);
        }
        if ($limit) {
            $qb->setMaxResults($limit);
        }
        return $qb->getQuery()->getResult();
    }
    
    public function getProjectQueryBuilder() {
         return $this
          ->createQueryBuilder('e')
          ->where('e.status = :status')
          ->andWhere('e.state = :state')
          ->orderBy('e.reference', 'ASC')
          ->setParameter('status', 1)
         ->setParameter('state', 1);

    }
}
